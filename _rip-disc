#!/bin/bash -

# Rip Disc
# ========
#
# Lines common to rip-movie and rip-episodes.

## Variables

aspect_ratio=false
bitrate=2000
bufsize=12500
burn=false
add_aac=false
foreign=false
scan=false
use_TMDb=false
constant_frame_rate=auto
subtitle_track="scan"
language="eng"
outputdir="$HOME/Movies"
prefix=""
season=1
title=1
source=""
preview_count=100
variable_fr=false

## Functions

_report_error () {
    printf "$(basename $0): $1.\n" >&2
    exit 1
}

_run() {
    if [[ -n "$dry_run" ]]; then
        echo "$@"
    else
        "$@"
    fi
}

_show_help() {
    printf -- "rip-movie [-17abBcdeflmnoprstuvw] title\n"
    printf -- "rip-episodes [-17abBcdeflmnoprstuvw] episode-list\n\n"
    printf -- "Options (and defaults):\n"
    printf -- "-1: set x264 bitrate and bufsize values to those for 1080p content\n"
    printf -- "-7: set x264 bitrate and bufsize values to those for 720p content\n"
    printf -- "-a: instead of an AC3 track only, add AAC as the first track\n"
    printf -- "-b rate: video bitrate (${bitrate})\n"
    printf -- "-B: burn subtitles into the video (${burn})\n"
    printf -- "-c: constant_frame_rate: set the constant frame rate (${constant_frame_rate})\n"
    printf -- "-d: set the movie filename to its name and year using TMDb\n"
    printf -- "-e source: source VIDEO_TS or MakeMKV-created directory to rip the episodes from (${source})\n"
    printf -- "-f: assume a foreign film and include all subtitles, not just those that are forced\n"
    printf -- "-l language: iso639-2 language to use for subtitles (and audio if not foreign) (${language})\n"
    printf -- "-m length: mimimum length (in mins) of titles to use (${min_length})\n"
    printf -- "-n: perform a dry run only\n"
    printf -- "-o dir: output directory (${outputdir})\n"
    printf -- "-p prefix: filename prefix ('${prefix}')\n"
    printf -- "-r pixel_aspect_ratio: colon-separated ratio (e.g., 16:9) (${aspect_ratio})\n"
    printf -- "-s n: season number (${season})\n"
    printf -- "-t n: start ripping from title n on disc (${title})\n"
    printf -- "-u subtitle_track: subtitle track to rip (${subtitle_track})\n"
    printf -- "-v: override mediainfo and force variable framerate (${variable_fr})\n"
    printf -- "-w preview_count: how many previews to generate (can help with autocropping) (${preview_count})\n"
    exit 2
}

_get_media_info() {
    # Detect source video properties with mediainfo
    media_info=$(mediainfo "$1")
    media_info_ar=$(grep -F 'Display aspect ratio' <<< "$media_info" | cut -d: -f2-)
    media_info_fm=$(grep -F 'Frame rate mode' <<< "$media_info" | cut -d: -f2-)
    media_info_fr=$(grep -F 'Frame rate' <<< "$media_info" | grep -vF mode | head -1 | cut -d: -f2- | cut -d' ' -f2)
    media_info_ch=$(grep -F 'Channel(s)' <<< "$media_info" | cut -d: -f2-)
}

_set_video_settings() {
    video_settings="--previews ${preview_count}:0 -e x264 -f mkv --modulus 2 -m --x264-preset medium --h264-profile high --h264-level 4.1 -x qpmax=34 -b ${bitrate} --decomb -N${language} --subtitle-default -s ${subtitle_track}"

    if ! "$foreign"; then
        # "Film isn't foreign, so find the forced subtitles only"
        video_settings="${video_settings} -F --native-dub"
    fi

    if [[ "$burn" == "true" ]]; then
        video_settings="${video_settings} --subtitle-burned"
    fi

    if [[ "$aspect_ratio" == "false" ]]; then
        video_settings="${video_settings} --strict-anamorphic"
    elif [[ "$aspect_ratio" == "auto" ]]; then
        video_settings="${video_settings} --custom-anamorphic --pixel-aspect ${media_info_ar}"
    else
        video_settings="${video_settings} --custom-anamorphic --pixel-aspect ${aspect_ratio}"
    fi

    if [[ "$variable_fr" == "true" ]]; then
        video_settings="${video_settings} --vfr"
    else
        if [[ "$constant_frame_rate" == "auto" ]]; then
            if grep -F Constant <<< "$media_info_fm" 2>&1 > /dev/null; then
                video_settings="${video_settings} --cfr -r${media_info_fr}"
            else
                video_settings="${video_settings} --vfr"
            fi
        else
            video_settings="${video_settings} --cfr -r${constant_frame_rate}"
        fi
    fi
}

_set_audio_settings() {
    audio_settings='-R Auto -D 0.0 --audio-fallback ca_aac'

    # If the film/episode isn't foreign, choose only the (default: English) audio track
    if ! "$foreign"; then
        audio_settings="${audio_settings} --audio-lang-list ${language}"
    fi

    # Use AAC codec if 2 channels are found for an audio stream and no 6 channel ones are
    if grep -qF 2 <<< "$media_info_ch" && ! grep -qF 6 <<< "$media_info_ch"; then
        audio_settings="${audio_settings} -6 dpl2 -E ca_aac -B 160"
    else
        if "$add_aac"; then
            audio_settings="${audio_settings} -6 dpl2,none -E ca_aac,copy:ac3 -B 160"
        else
            audio_settings="${audio_settings} -6 none -E copy:ac3"
        fi
    fi
}

## Option parsing

while getopts :17ab:Bc:de:fl:m:no:p:r:s:t:u:vw:h opt; do
    case "$opt" in
        1)    bitrate=5000
              bufsize=25000
              ;;
        7)    bitrate=4000
              bufsize=17500
              ;;
        a)    add_aac=true
              ;;
        b)    bitrate="$OPTARG"
              ;;
        B)    burn=true
              ;;
        c)    constant_frame_rate="$OPTARG"
              ;;
        d)    use_TMDb=true
              ;;
        e)    source="$OPTARG"
              ;;
        f)    foreign=true
              ;;
        l)    language="$OPTARG"
              ;;
        m)    min_length="$OPTARG"
              ;;
        n)    dry_run=true
              ;;
        o)    outputdir="$OPTARG"
              ;;
        p)    prefix="$OPTARG"
              ;;
        r)    aspect_ratio="$OPTARG"
              ;;
        s)    season="$OPTARG"
              ;;
        t)    title="$OPTARG"
              ;;
        u)    subtitle_track="$OPTARG"
              ;;
        v)    variable_fr=true
              ;;
        w)    preview_count="$OPTARG"
              ;;
        h)    _show_help
              ;;
        '?')  _report_error "invalid option $OPTARG. Invoke with option -h for more info"
              ;;
    esac
done

shift $((OPTIND-1)) # Forget single-letter options now; put main options to front
